// Generated by CoffeeScript 1.10.0
(function() {
  describe('leafletData', function() {
    var $compile;
    var $q;
    var $rootScope;
    var geojsonData;
    var leafletData;
    var leafletHelpers;
    var mainLayers;
    $q = geojsonData = mainLayers = leafletHelpers = leafletData = $rootScope = $compile = void 0;
    beforeEach(function() {
      module('leaflet-directive');
      return inject(function(_$compile_, _$rootScope_, _$timeout_, _leafletData_, _leafletHelpers_, _$q_) {
        var $timeout;
        $q = _$q_;
        $compile = _$compile_;
        $rootScope = _$rootScope_;
        leafletData = _leafletData_;
        $timeout = _$timeout_;
        return window.ngLeafLetTestGlobals.$timeout = $timeout;
      });
    });

    return describe('no mapId', function() {
      beforeEach(function() {
        this.knownMarkers = [1, 2, 3];
        this.knownGeoJSON = ['1', '2', '3'];
        return this.setPromise = $q.all([leafletData.setMarkers(this.knownMarkers), leafletData.setGeoJSON(this.knownGeoJSON)]);
      });

      it('has unique data', function(done) {
        var _allGet;
        var _geoJSON;
        var _markers;
        _geoJSON = null;
        _markers = null;
        _allGet = null;
        this.digest($rootScope, (function(_this) {
          return function() {
            return _this.setPromise.then(function() {
              return _allGet = $q.all([
                leafletData.getMarkers().then(function(lObjs) {
                  return _markers = lObjs;
                }, leafletData.getGeoJSON().then(function(lObjs) {
                  return _geoJSON = lObjs;
                })),
              ]);
            });
          };
        })(this));

        return this.digest($rootScope, (function(_this) {
          return function() {
            return _allGet.then(function() {
              expect(_this.knownMarkers).toBe(_markers);
              expect(_this.knownGeoJSON).toBe(_geoJSON);
              expect(_geoJSON !== _markers).toBeTruthy();
              return done();
            });
          };
        })(this));
      });

      return it('modifying localScope modifies leafletData\'s version', function(done) {
        var _allGet;
        var _geoJSON;
        var _markers;
        _geoJSON = null;
        _markers = null;
        _allGet = null;
        this.knownMarkers.push(4);
        this.knownGeoJSON.push('4');
        console.log($q);
        this.digest($rootScope, (function(_this) {
          return function() {
            return _this.setPromise.then(function() {
              return _allGet = $q.all([
                leafletData.getMarkers().then(function(lObjs) {
                  return _markers = lObjs;
                }, leafletData.getGeoJSON().then(function(lObjs) {
                  return _geoJSON = lObjs;
                })),
              ]);
            });
          };
        })(this));

        return this.digest($rootScope, (function(_this) {
          return function() {
            return _allGet.then(function() {
              expect(_this.knownMarkers).toBe(_markers);
              expect(_this.knownGeoJSON).toBe(_geoJSON);
              expect(_geoJSON !== _markers).toBeTruthy();
              return done();
            });
          };
        })(this));
      });
    });
  });

}).call(this);
